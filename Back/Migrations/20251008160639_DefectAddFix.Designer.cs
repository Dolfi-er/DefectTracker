// <auto-generated />
using System;
using Back.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Back.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251008160639_DefectAddFix")]
    partial class DefectAddFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Back.Models.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment_text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("DefectId")
                        .HasColumnType("integer")
                        .HasColumnName("defect_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId");

                    b.HasIndex("DefectId");

                    b.HasIndex("UserId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("Back.Models.Entities.Defect", b =>
                {
                    b.Property<int>("DefectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("defect_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DefectId"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("InfoId")
                        .HasColumnType("integer")
                        .HasColumnName("info_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int?>("ResponsibleId")
                        .HasColumnType("integer")
                        .HasColumnName("responsible_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("DefectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InfoId")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("StatusId");

                    b.ToTable("defect");
                });

            modelBuilder.Entity("Back.Models.Entities.DefectAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("attachment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttachmentId"));

                    b.Property<int>("DefectId")
                        .HasColumnType("integer")
                        .HasColumnName("defect_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_date");

                    b.Property<int>("UploadedById")
                        .HasColumnType("integer")
                        .HasColumnName("uploaded_by_id");

                    b.HasKey("AttachmentId");

                    b.HasIndex("DefectId");

                    b.HasIndex("UploadedById");

                    b.ToTable("defect_attachment");
                });

            modelBuilder.Entity("Back.Models.Entities.DefectHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("history_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HistoryId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("change_date");

                    b.Property<int>("DefectId")
                        .HasColumnType("integer")
                        .HasColumnName("defect_id");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("field_name");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("old_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("DefectId");

                    b.HasIndex("UserId");

                    b.ToTable("defect_history");
                });

            modelBuilder.Entity("Back.Models.Entities.DefectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_desc");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status_name");

                    b.HasKey("Id");

                    b.ToTable("defect_status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusDescription = "New defect",
                            StatusName = "New"
                        },
                        new
                        {
                            Id = 2,
                            StatusDescription = "Defect in progress",
                            StatusName = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            StatusDescription = "Defect under review",
                            StatusName = "Under Review"
                        },
                        new
                        {
                            Id = 4,
                            StatusDescription = "Defect closed",
                            StatusName = "Closed"
                        },
                        new
                        {
                            Id = 5,
                            StatusDescription = "Defect cancelled",
                            StatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("Back.Models.Entities.Info", b =>
                {
                    b.Property<int>("InfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("info_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InfoId"));

                    b.Property<string>("DefectDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("defect_description");

                    b.Property<string>("DefectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("defect_name");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint")
                        .HasColumnName("prioriyty");

                    b.Property<DateTime>("StatusChangeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_change_date");

                    b.HasKey("InfoId");

                    b.ToTable("info");
                });

            modelBuilder.Entity("Back.Models.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("project_status_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectStatusId");

                    b.ToTable("project");
                });

            modelBuilder.Entity("Back.Models.Entities.ProjectStatus", b =>
                {
                    b.Property<int>("ProjectStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("project_status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectStatusId"));

                    b.Property<string>("ProjectStatusDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("project_status_description");

                    b.Property<string>("ProjectStatusName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_status_name");

                    b.HasKey("ProjectStatusId");

                    b.ToTable("project_status");

                    b.HasData(
                        new
                        {
                            ProjectStatusId = 1,
                            ProjectStatusDescription = "Active project",
                            ProjectStatusName = "Active"
                        },
                        new
                        {
                            ProjectStatusId = 2,
                            ProjectStatusDescription = "Completed project",
                            ProjectStatusName = "Completed"
                        },
                        new
                        {
                            ProjectStatusId = 3,
                            ProjectStatusDescription = "Project on hold",
                            ProjectStatusName = "On Hold"
                        });
                });

            modelBuilder.Entity("Back.Models.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Observer"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Engineer"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Manager"
                        });
                });

            modelBuilder.Entity("Back.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Back.Models.Entities.Comment", b =>
                {
                    b.HasOne("Back.Models.Entities.Defect", "Defect")
                        .WithMany("Comments")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Back.Models.Entities.Defect", b =>
                {
                    b.HasOne("Back.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Back.Models.Entities.Info", "Info")
                        .WithOne("Defect")
                        .HasForeignKey("Back.Models.Entities.Defect", "InfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.Entities.Project", "Project")
                        .WithMany("Defects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Back.Models.Entities.User", "Responsible")
                        .WithMany("ResponsibleDefects")
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Back.Models.Entities.DefectStatus", "Status")
                        .WithMany("Defects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Info");

                    b.Navigation("Project");

                    b.Navigation("Responsible");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Back.Models.Entities.DefectAttachment", b =>
                {
                    b.HasOne("Back.Models.Entities.Defect", "Defect")
                        .WithMany("Attachments")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.Entities.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Back.Models.Entities.DefectHistory", b =>
                {
                    b.HasOne("Back.Models.Entities.Defect", "Defect")
                        .WithMany("History")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.Entities.User", "User")
                        .WithMany("DefectHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Back.Models.Entities.Project", b =>
                {
                    b.HasOne("Back.Models.Entities.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Back.Models.Entities.User", b =>
                {
                    b.HasOne("Back.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Back.Models.Entities.Defect", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("History");
                });

            modelBuilder.Entity("Back.Models.Entities.DefectStatus", b =>
                {
                    b.Navigation("Defects");
                });

            modelBuilder.Entity("Back.Models.Entities.Info", b =>
                {
                    b.Navigation("Defect");
                });

            modelBuilder.Entity("Back.Models.Entities.Project", b =>
                {
                    b.Navigation("Defects");
                });

            modelBuilder.Entity("Back.Models.Entities.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Back.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Back.Models.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DefectHistories");

                    b.Navigation("ResponsibleDefects");
                });
#pragma warning restore 612, 618
        }
    }
}
